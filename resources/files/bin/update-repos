#!/bin/bash

function show_usage() {
    usage="$(basename "$0") [-h] <branch> [<repo>...]

where:
    -h          Show this help text

    branch      The branch you would like checked out on every repo

    repo        The paths to the repos you would like affected. Alternately
                provide a .repos file in the current directly with a newline-
                delimited list of repos"

    printf "$usage\n"
}

if [[ $1 == "" || $1 == "-h"  || $1 == "--help" ]]; then
    show_usage
    exit
elif [[ $2 == "" && ! -f .repos ]]; then
    echo "No valid repos, exiting"
    exit
fi


BRANCH=$1

REPOS=${@:2}
if [[ $REPOS == "" && -f ".repos" ]]; then
    REPOS=$(cat .repos)
fi

function update_repo() {
    DIR=$1
    BRANCH=$2
    FAILED=0

    cd $DIR
    if [[ $? != 0 ]]; then
        return 1
    fi

    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

    RESULT=""
    NEW_BRANCH=$CURRENT_BRANCH
    if [[ $CURRENT_BRANCH == taylor* ]]; then
        RESULT=$(git prepare-for-merge $BRANCH 2>&1)
    else
        RESULT=$(git checkout $BRANCH 2>&1; git pull 2>&1)
        NEW_BRANCH=$BRANCH
    fi

    if [[ $RESULT == *CONFLICT* ]]; then
        FAILED=1
    elif [[ $RESULT == *"Cannot rebase"* ]]; then
        FAILED=1
    elif [[ $RESULT == *"You have unstaged changes"* ]]; then
        FAILED=1
    fi


    Color_Off="\033[0m"
    Red="\033[0;31m"
    Green="\033[0;32m"

    if [[ $FAILED != 0 ]]; then
        printf "${Red} ✗${Color_Off} - %-12s $NEW_BRANCH\n" $DIR
    else
        printf "${Green} ✓${Color_Off} - %-12s $NEW_BRANCH\n" $DIR
    fi

}

for repo in ${REPOS[@]}; do
    update_repo $repo $BRANCH &
done

for job in $(jobs -p); do
    wait $job
done


