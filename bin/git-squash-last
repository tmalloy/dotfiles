#!/bin/bash

# This script effecitively squahes the last two commits together and maintains
# the earlier of the two commit messages. It does this by checking out a
# temporary branch, backing up the original branch by two commits, then merging
# in the temporary branch and committing with the first commit's message.

MESSAGE=`git log --format=%B -1 HEAD^`

ORIG_BRANCH=`git branch | grep \* | cut -f2 -d' '`
TEMP_BRANCH=`env LC_CTYPE=C tr -dc "a-zA-Z0-9" < /dev/urandom | head -c 32`

STASH_RESULT=`git stash`

git co -b $TEMP_BRANCH
git co $ORIG_BRANCH

git reset --hard HEAD^^
git merge $TEMP_BRANCH --squash
git commit --all -m "$MESSAGE"

git branch -D $TEMP_BRANCH

if [[ $STASH_RESULT != "No local changes to save" ]]
then
    git stash pop
fi

